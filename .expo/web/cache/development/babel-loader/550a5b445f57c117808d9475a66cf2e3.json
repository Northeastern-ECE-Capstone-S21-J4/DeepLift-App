{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/sam/Capstone/DeepLift-App/app/screens/RecordingScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { Camera } from 'expo-camera';\n\nfunction RecordingScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  var pictureSize = Camera.getAvailablePictureSizesAsync(Camera.getSupportedRatiosAsync());\n  console.log(pictureSize);\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === null) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 16\n      }\n    });\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 16\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, React.createElement(Camera, {\n    style: styles.camera,\n    type: type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }, React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }, \" Flip \")))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  button: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  }\n});\nexport default RecordingScreen;","map":{"version":3,"sources":["/home/sam/Capstone/DeepLift-App/app/screens/RecordingScreen.js"],"names":["React","useState","useEffect","Camera","RecordingScreen","hasPermission","setHasPermission","Constants","Type","back","type","setType","pictureSize","getAvailablePictureSizesAsync","getSupportedRatiosAsync","console","log","requestPermissionsAsync","status","styles","container","camera","buttonContainer","button","front","text","StyleSheet","create","flex","backgroundColor","flexDirection","margin","alignSelf","alignItems","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity } from 'react-native';\nimport { Camera } from 'expo-camera';\n\nfunction RecordingScreen() {\n    const [hasPermission, setHasPermission] = useState(null);\n    const [type, setType] = useState(Camera.Constants.Type.back);\n\n    const pictureSize = Camera.getAvailablePictureSizesAsync(Camera.getSupportedRatiosAsync());\n    console.log(pictureSize);\n\n    useEffect(() => {\n        (async () => {\n        const { status } = await Camera.requestPermissionsAsync();\n        setHasPermission(status === 'granted');\n        })();\n    }, []);\n\n    if (hasPermission === null) {\n        return <View />;\n    }\n    if (hasPermission === false) {\n        return <Text>No access to camera</Text>;\n    }\n    return (\n        <View style={styles.container}>\n            <Camera style={styles.camera} type={type}>\n                <View style={styles.buttonContainer}>\n                    <TouchableOpacity\n                    style={styles.button}\n                    onPress={() => {\n                    setType(\n                    type === Camera.Constants.Type.back\n                    ? Camera.Constants.Type.front\n                    : Camera.Constants.Type.back\n                    );\n                    }}>\n                        <Text style={styles.text}> Flip </Text>\n                    </TouchableOpacity>\n                </View>\n            </Camera>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n    },\n    camera: {\n        flex: 1,\n    },\n    buttonContainer: {\n        flex: 1,\n        backgroundColor: 'transparent',\n        flexDirection: 'row',\n        margin: 20,\n    },\n    button: {\n        flex: 0.1,\n        alignSelf: 'flex-end',\n        alignItems: 'center',\n    },\n    text: {\n        fontSize: 18,\n        color: 'white',\n    },\n});\n\n\nexport default RecordingScreen;"]},"metadata":{},"sourceType":"module"}