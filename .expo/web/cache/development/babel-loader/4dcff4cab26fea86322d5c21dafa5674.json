{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"@babel/runtime/regenerator\");\n\nvar AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\n\nmodule.exports = {\n  setFlushBehavior: function setFlushBehavior(flushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n  logEvent: function logEvent(eventName) {\n    var valueToSum = 0;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n\n    var parameters = null;\n\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n  logPurchase: function logPurchase(purchaseAmount, currencyCode, parameters) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n  logPushNotificationOpen: function logPushNotificationOpen(payload) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n  flush: function flush() {\n    AppEventsLogger.flush();\n  },\n  setUserID: function setUserID(userID) {\n    AppEventsLogger.setUserID(userID);\n  },\n  getUserID: function getUserID() {\n    return _regeneratorRuntime.async(function getUserID$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AppEventsLogger.getUserID());\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  updateUserProperties: function updateUserProperties(parameters) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n  setUserData: function setUserData(userData) {\n    AppEventsLogger.setUserData(userData);\n  },\n  setPushNotificationsDeviceToken: function setPushNotificationsDeviceToken(deviceToken) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n  setPushNotificationsRegistrationId: function setPushNotificationsRegistrationId(registrationId) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  }\n};","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/node_modules/react-native-fbsdk/js/FBAppEventsLogger.js"],"names":["AppEventsLogger","require","NativeModules","FBAppEventsLogger","module","exports","setFlushBehavior","flushBehavior","logEvent","eventName","valueToSum","args","shift","parameters","logPurchase","purchaseAmount","currencyCode","logPushNotificationOpen","payload","flush","setUserID","userID","getUserID","updateUserProperties","setUserData","userData","setPushNotificationsDeviceToken","deviceToken","setPushNotificationsRegistrationId","registrationId"],"mappings":"AAsBA;;;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,aAAxB,CAAsCC,iBAA9D;;AAkCAC,MAAM,CAACC,OAAP,GAAiB;AAKfC,EAAAA,gBALe,4BAKEC,aALF,EAKyC;AACtDP,IAAAA,eAAe,CAACM,gBAAhB,CAAiCC,aAAjC;AACD,GAPc;AAkBfC,EAAAA,QAlBe,oBAkBNC,SAlBM,EAkB8C;AAC3D,QAAIC,UAAU,GAAG,CAAjB;;AAD2D,sCAA9BC,IAA8B;AAA9BA,MAAAA,IAA8B;AAAA;;AAE3D,QAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC/BD,MAAAA,UAAU,GAAGC,IAAI,CAACC,KAAL,EAAb;AACD;;AACD,QAAIC,UAAU,GAAG,IAAjB;;AACA,QAAI,OAAOF,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC/BE,MAAAA,UAAU,GAAGF,IAAI,CAAC,CAAD,CAAjB;AACD;;AACDX,IAAAA,eAAe,CAACQ,QAAhB,CAAyBC,SAAzB,EAAoCC,UAApC,EAAgDG,UAAhD;AACD,GA5Bc;AAiCfC,EAAAA,WAjCe,uBAkCbC,cAlCa,EAmCbC,YAnCa,EAoCbH,UApCa,EAqCb;AACAb,IAAAA,eAAe,CAACc,WAAhB,CAA4BC,cAA5B,EAA4CC,YAA5C,EAA0DH,UAA1D;AACD,GAvCc;AA4CfI,EAAAA,uBA5Ce,mCA4CSC,OA5CT,EA4C2B;AACxClB,IAAAA,eAAe,CAACiB,uBAAhB,CAAwCC,OAAxC;AACD,GA9Cc;AAmDfC,EAAAA,KAnDe,mBAmDP;AACNnB,IAAAA,eAAe,CAACmB,KAAhB;AACD,GArDc;AA2DfC,EAAAA,SA3De,qBA2DLC,MA3DK,EA2DkB;AAC/BrB,IAAAA,eAAe,CAACoB,SAAhB,CAA0BC,MAA1B;AACD,GA7Dc;AAkETC,EAAAA,SAlES;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAmEAtB,eAAe,CAACsB,SAAhB,EAnEA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0EfC,EAAAA,oBA1Ee,gCA0EMV,UA1EN,EA0E0B;AACvCb,IAAAA,eAAe,CAACuB,oBAAhB,CAAqCV,UAArC;AACD,GA5Ec;AAiFfW,EAAAA,WAjFe,uBAiFHC,QAjFG,EAiFiB;AAC9BzB,IAAAA,eAAe,CAACwB,WAAhB,CAA4BC,QAA5B;AACD,GAnFc;AAyFfC,EAAAA,+BAzFe,2CAyFiBC,WAzFjB,EAyFsC;AACnD3B,IAAAA,eAAe,CAAC0B,+BAAhB,CAAgDC,WAAhD;AACD,GA3Fc;AAiGfC,EAAAA,kCAjGe,8CAiGoBC,cAjGpB,EAiG4C;AACzD7B,IAAAA,eAAe,CAAC4B,kCAAhB,CAAmDC,cAAnD;AACD;AAnGc,CAAjB","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AppEventsLogger = require('react-native').NativeModules.FBAppEventsLogger;\n/**\n * Controls when an AppEventsLogger sends log events to the server\n */\ntype AppEventsFlushBehavior =\n  /**\n   * Flush automatically: periodically (every 15 seconds or after every 100 events), and\n   * always at app reactivation. This is the default value.\n   */\n  | 'auto'\n  /**\n   * Only flush when AppEventsLogger.flush() is explicitly invoked.\n   */\n  | 'explicit_only';\ntype Params = {[key: string]: string | number};\n\n/**\n * Info about a user to increase chances of matching a Facebook user.\n * See https://developers.facebook.com/docs/app-events/advanced-matching for\n * more info about the expected format of each field.\n */\ntype UserData = $ReadOnly<{|\n  email?: ?string,\n  firstName?: ?string,\n  lastName?: ?string,\n  phone?: ?string,\n  dateOfBirth?: ?string,\n  gender?: ?('m' | 'f'),\n  city?: ?string,\n  state?: ?string,\n  zip?: ?string,\n  country?: ?string,\n|}>;\n\nmodule.exports = {\n  /**\n   * Sets the current event flushing behavior specifying when events\n   * are sent back to Facebook servers.\n   */\n  setFlushBehavior(flushBehavior: AppEventsFlushBehavior) {\n    AppEventsLogger.setFlushBehavior(flushBehavior);\n  },\n\n  /**\n   * Logs an event with eventName and optional arguments.\n   * This function supports the following usage:\n   * logEvent(eventName: string);\n   * logEvent(eventName: string, valueToSum: number);\n   * logEvent(eventName: string, parameters: {[key:string]:string|number});\n   * logEvent(eventName: string, valueToSum: number, parameters: {[key:string]:string|number});\n   * See https://developers.facebook.com/docs/app-events/android for detail.\n   */\n  logEvent(eventName: string, ...args: Array<number | Params>) {\n    let valueToSum = 0;\n    if (typeof args[0] === 'number') {\n      valueToSum = args.shift();\n    }\n    let parameters = null;\n    if (typeof args[0] === 'object') {\n      parameters = args[0];\n    }\n    AppEventsLogger.logEvent(eventName, valueToSum, parameters);\n  },\n\n  /**\n   * Logs a purchase. See http://en.wikipedia.org/wiki/ISO_4217 for currencyCode.\n   */\n  logPurchase(\n    purchaseAmount: number,\n    currencyCode: string,\n    parameters?: ?Params,\n  ) {\n    AppEventsLogger.logPurchase(purchaseAmount, currencyCode, parameters);\n  },\n\n  /**\n   * Logs an app event that tracks that the application was open via Push Notification.\n   */\n  logPushNotificationOpen(payload: ?Object) {\n    AppEventsLogger.logPushNotificationOpen(payload);\n  },\n\n  /**\n   * Explicitly kicks off flushing of events to Facebook.\n   */\n  flush() {\n    AppEventsLogger.flush();\n  },\n\n  /**\n   * Sets a custom user ID to associate with all app events.\n   * The userID is persisted until it is cleared by passing nil.\n   */\n  setUserID(userID: string | null) {\n    AppEventsLogger.setUserID(userID);\n  },\n\n  /**\n   * Returns user id or null if not set\n   */\n  async getUserID(): Promise<?string> {\n    return await AppEventsLogger.getUserID();\n  },\n\n  /**\n   * Sends a request to update the properties for the current user, set by\n   * setUserID. You must call setUserID before making this call.\n   */\n  updateUserProperties(parameters: Params) {\n    AppEventsLogger.updateUserProperties(parameters);\n  },\n\n  /**\n   * Set additional data about the user to increase chances of matching a Facebook user.\n   */\n  setUserData(userData: UserData) {\n    AppEventsLogger.setUserData(userData);\n  },\n\n  /**\n   * For iOS only, sets and sends device token to register the current application for push notifications.\n   * @platform ios\n   */\n  setPushNotificationsDeviceToken(deviceToken: string) {\n    AppEventsLogger.setPushNotificationsDeviceToken(deviceToken);\n  },\n\n  /**\n   * For Android only, sets and sends registration id to register the current app for push notifications.\n   * @platform Android\n   */\n  setPushNotificationsRegistrationId(registrationId: string) {\n    AppEventsLogger.setPushNotificationsRegistrationId(registrationId);\n  },\n};\n"]},"metadata":{},"sourceType":"script"}