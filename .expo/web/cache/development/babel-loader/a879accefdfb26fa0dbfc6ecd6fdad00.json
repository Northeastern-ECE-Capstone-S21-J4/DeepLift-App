{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport invariant from 'invariant';\nimport { getNavigation } from '@react-navigation/core';\nimport { initAction } from \"./reducer\";\nvar reduxSubscribers = new Map();\n\nfunction getReduxSubscribers(key) {\n  var subscribers = reduxSubscribers.get(key);\n\n  if (!subscribers) {\n    subscribers = new Set();\n    reduxSubscribers.set(key, subscribers);\n  }\n\n  return subscribers;\n}\n\nvar EMPTY_SCREEN_PROPS = {};\n\nvar getScreenProps = function getScreenProps() {\n  return EMPTY_SCREEN_PROPS;\n};\n\nfunction createReactNavigationReduxMiddleware(navStateSelector) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"root\";\n  return function (store) {\n    return function (next) {\n      return function (action) {\n        var oldState = store.getState();\n        var result = next(action);\n        var newState = store.getState();\n        triggerAllSubscribers(key, {\n          type: 'action',\n          action: action,\n          state: navStateSelector(newState),\n          lastState: navStateSelector(oldState)\n        });\n        return result;\n      };\n    };\n  };\n}\n\nvar delayedTriggers = new Map();\n\nfunction triggerAllSubscribers(key, payload) {\n  var trigger = function trigger() {\n    return getReduxSubscribers(key).forEach(function (subscriber) {\n      return subscriber(payload);\n    });\n  };\n\n  if (!payload.action || !payload.action.hasOwnProperty('type') || !payload.action.type.startsWith(\"Navigation\") || payload.state === payload.lastState) {\n    trigger();\n    return;\n  }\n\n  var existingTriggers = delayedTriggers.get(key);\n\n  if (existingTriggers) {\n    existingTriggers.push(trigger);\n  } else {\n    delayedTriggers.set(key, [trigger]);\n  }\n}\n\nfunction triggerDelayedSubscribers(key) {\n  var triggers = delayedTriggers.get(key);\n\n  if (!triggers) {\n    return;\n  }\n\n  delayedTriggers.delete(key);\n\n  for (var _iterator = _createForOfIteratorHelperLoose(triggers), _step; !(_step = _iterator()).done;) {\n    var trigger = _step.value;\n    trigger();\n  }\n}\n\nfunction createDidUpdateCallback(key) {\n  return triggerDelayedSubscribers.bind(null, key);\n}\n\nfunction initializeListeners(key, state) {\n  triggerAllSubscribers(key, {\n    type: 'action',\n    action: initAction,\n    state: state,\n    lastState: null\n  });\n  triggerDelayedSubscribers(key);\n}\n\nfunction createNavigationPropConstructor(key) {\n  return function (dispatch, state, router, getCurrentNavigation) {\n    invariant(router, \"App.router must be provided to createNavigationPropConstructor as of \" + \"react-navigation-redux-helpers@2.0.0. Learn more: \" + \"https://reactnavigation.org/docs/en/\" + \"redux-integration.html#breaking-changes-in-2.3\");\n    invariant(getCurrentNavigation, \"getCurrentNavigation must be provided to createNavigationPropConstructor as of \" + \"react-navigation-redux-helpers@2.0.0. Learn more: \" + \"https://reactnavigation.org/docs/en/\" + \"redux-integration.html#breaking-changes-in-2.3\");\n    return getNavigation(router, state, dispatch, getReduxSubscribers(key), getScreenProps, getCurrentNavigation);\n  };\n}\n\nexport { createReactNavigationReduxMiddleware, createDidUpdateCallback, initializeListeners, createNavigationPropConstructor };","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/node_modules/react-navigation-redux-helpers/src/middleware.js"],"names":["invariant","getNavigation","initAction","reduxSubscribers","Map","getReduxSubscribers","key","subscribers","get","Set","set","EMPTY_SCREEN_PROPS","getScreenProps","createReactNavigationReduxMiddleware","navStateSelector","store","next","action","oldState","getState","result","newState","triggerAllSubscribers","type","state","lastState","delayedTriggers","payload","trigger","forEach","subscriber","hasOwnProperty","startsWith","existingTriggers","push","triggerDelayedSubscribers","triggers","delete","createDidUpdateCallback","bind","initializeListeners","createNavigationPropConstructor","dispatch","router","getCurrentNavigation"],"mappings":"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","sourcesContent":["// @flow\n\nimport type {\n  NavigationEventCallback,\n  NavigationEventPayload,\n  NavigationState,\n  NavigationDispatch,\n  NavigationScreenProp,\n  NavigationRouter,\n} from '@react-navigation/core';\nimport type { Middleware } from 'redux';\n\nimport invariant from 'invariant';\nimport { getNavigation } from '@react-navigation/core';\n\nimport { initAction } from './reducer';\n\nconst reduxSubscribers = new Map();\nfunction getReduxSubscribers(key: string): Set<NavigationEventCallback> {\n  let subscribers = reduxSubscribers.get(key);\n  if (!subscribers) {\n    subscribers = new Set();\n    reduxSubscribers.set(key, subscribers);\n  }\n  return subscribers;\n}\n\n// screenProps are a legacy concept in React Navigation,\n// and should not be used in redux apps\nconst EMPTY_SCREEN_PROPS = {};\nconst getScreenProps = () => EMPTY_SCREEN_PROPS;\n\nfunction createReactNavigationReduxMiddleware<State: {}>(\n  navStateSelector: (state: State) => NavigationState,\n  key?: string = \"root\",\n): Middleware<State, *, *> {\n  return store => next => action => {\n    const oldState = store.getState();\n    const result = next(action);\n    const newState = store.getState();\n    triggerAllSubscribers(\n      key,\n      {\n        type: 'action',\n        action,\n        state: navStateSelector(newState),\n        lastState: navStateSelector(oldState),\n      },\n    );\n    return result;\n  };\n}\n\nconst delayedTriggers = new Map();\n\nfunction triggerAllSubscribers(key: string, payload: NavigationEventPayload) {\n  const trigger =\n    () => getReduxSubscribers(key).forEach(subscriber => subscriber(payload));\n  if (\n    !payload.action ||\n    !payload.action.hasOwnProperty('type') ||\n    !payload.action.type.startsWith(\"Navigation\") ||\n    payload.state === payload.lastState\n  ) {\n    trigger();\n    return;\n  }\n  const existingTriggers = delayedTriggers.get(key);\n  if (existingTriggers) {\n    existingTriggers.push(trigger);\n  } else {\n    delayedTriggers.set(key, [trigger]);\n  }\n}\n\nfunction triggerDelayedSubscribers(key: string) {\n  const triggers = delayedTriggers.get(key);\n  if (!triggers) {\n    return;\n  }\n  delayedTriggers.delete(key);\n  for (let trigger of triggers) {\n    trigger();\n  }\n}\n\nfunction createDidUpdateCallback(key: string) {\n  return triggerDelayedSubscribers.bind(null, key);\n}\n\nfunction initializeListeners(key: string, state: NavigationState) {\n  triggerAllSubscribers(\n    key,\n    {\n      type: 'action',\n      action: initAction,\n      state: state,\n      lastState: null,\n    },\n  );\n  triggerDelayedSubscribers(key);\n}\n\nfunction createNavigationPropConstructor(key: string) {\n  return <State: NavigationState>(\n    dispatch: NavigationDispatch,\n    state: State,\n    router: NavigationRouter<*, *>,\n    getCurrentNavigation: () => ?NavigationScreenProp<State>,\n  ): NavigationScreenProp<State> => {\n    invariant(\n      router,\n      \"App.router must be provided to createNavigationPropConstructor as of \" +\n        \"react-navigation-redux-helpers@2.0.0. Learn more: \" +\n        \"https://reactnavigation.org/docs/en/\" +\n        \"redux-integration.html#breaking-changes-in-2.3\",\n    );\n    invariant(\n      getCurrentNavigation,\n      \"getCurrentNavigation must be provided to createNavigationPropConstructor as of \" +\n        \"react-navigation-redux-helpers@2.0.0. Learn more: \" +\n        \"https://reactnavigation.org/docs/en/\" +\n        \"redux-integration.html#breaking-changes-in-2.3\",\n    );\n    return getNavigation(\n      router,\n      state,\n      dispatch,\n      getReduxSubscribers(key),\n      getScreenProps,\n      getCurrentNavigation,\n    );\n  };\n}\n\nexport {\n  createReactNavigationReduxMiddleware,\n  createDidUpdateCallback,\n  initializeListeners,\n  createNavigationPropConstructor,\n};\n"]},"metadata":{},"sourceType":"module"}