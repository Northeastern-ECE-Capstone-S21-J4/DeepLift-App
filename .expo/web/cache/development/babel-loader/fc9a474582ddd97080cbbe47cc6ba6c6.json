{"ast":null,"code":"import Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport { connect } from \"react-redux\";\nimport { createStackNavigator } from 'react-navigation-stack';\nimport { createReactNavigationReduxMiddleware, createReduxContainer } from \"react-navigation-redux-helpers\";\nimport TabNavigator from \"./TabNavigator\";\nimport LoginScreen from \"../screens/Login\";\nimport SignupScreen from \"../screens/Signup\";\nimport WelcomeScreen from \"../screens/WelcomeScreen\";\n\nvar noTransitionConfig = function noTransitionConfig() {\n  return {\n    transitionSpec: {\n      duration: 0,\n      timing: Animated.timing,\n      easing: Easing.step0\n    }\n  };\n};\n\nvar middleware = createReactNavigationReduxMiddleware(function (state) {\n  return state.nav;\n});\nvar LoginStack = createStackNavigator({\n  Login: {\n    screen: LoginScreen\n  },\n  Signup: {\n    screen: SignupScreen\n  },\n  Welcome: {\n    screen: WelcomeScreen\n  }\n}, {\n  initialRouteName: \"Welcome\",\n  headerMode: \"float\",\n  navigationOptions: function navigationOptions(_ref) {\n    var navigation = _ref.navigation;\n    return {\n      headerTintColor: \"red\",\n      headerTitleStyle: styles.headerTitleStyle\n    };\n  },\n  cardStyle: {\n    backgroundColor: \"#FFFFFF\"\n  }\n});\nvar RootNavigator = createStackNavigator({\n  LoginStack: {\n    screen: LoginStack\n  },\n  TabNavigator: {\n    screen: TabNavigator\n  }\n}, {\n  headerMode: \"none\",\n  initialRouteName: \"TabNavigator\",\n  transitionConfig: noTransitionConfig,\n  navigationOptions: function navigationOptions(_ref2) {\n    var navigation = _ref2.navigation;\n    return {\n      color: \"black\"\n    };\n  }\n});\nvar AppWithNavigationState = createReduxContainer(RootNavigator, \"root\");\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    state: state.nav\n  };\n};\n\nvar AppNavigator = connect(mapStateToProps)(AppWithNavigationState);\nexport { RootNavigator, AppNavigator, middleware };","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/navigation/AppNavigator.js"],"names":["connect","createStackNavigator","createReactNavigationReduxMiddleware","createReduxContainer","TabNavigator","LoginScreen","SignupScreen","WelcomeScreen","noTransitionConfig","transitionSpec","duration","timing","Animated","easing","Easing","step0","middleware","state","nav","LoginStack","Login","screen","Signup","Welcome","initialRouteName","headerMode","navigationOptions","navigation","headerTintColor","headerTitleStyle","styles","cardStyle","backgroundColor","RootNavigator","transitionConfig","color","AppWithNavigationState","mapStateToProps","AppNavigator"],"mappings":";;AACA,SAASA,OAAT,QAAwB,aAAxB;AACA,SAAQC,oBAAR,QAAmC,wBAAnC;AACA,SAASC,oCAAT,EAA+CC,oBAA/C,QACe,gCADf;AAEA,OAAOC,YAAP;AACA,OAAOC,WAAP;AACA,OAAOC,YAAP;AACA,OAAOC,aAAP;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAO;AAC9BC,IAAAA,cAAc,EAAE;AACdC,MAAAA,QAAQ,EAAE,CADI;AAEdC,MAAAA,MAAM,EAAEC,QAAQ,CAACD,MAFH;AAGdE,MAAAA,MAAM,EAAEC,MAAM,CAACC;AAHD;AADc,GAAP;AAAA,CAA3B;;AAQE,IAAMC,UAAU,GAAGd,oCAAoC,CACrD,UAAAe,KAAK;AAAA,SAAIA,KAAK,CAACC,GAAV;AAAA,CADgD,CAAvD;AAKF,IAAMC,UAAU,GAAGlB,oBAAoB,CACnC;AACEmB,EAAAA,KAAK,EAAE;AAAEC,IAAAA,MAAM,EAAEhB;AAAV,GADT;AAEEiB,EAAAA,MAAM,EAAE;AAAED,IAAAA,MAAM,EAAEf;AAAV,GAFV;AAGEiB,EAAAA,OAAO,EAAE;AAAEF,IAAAA,MAAM,EAAEd;AAAV;AAHX,CADmC,EAMnC;AACEiB,EAAAA,gBAAgB,EAAE,SADpB;AAEEC,EAAAA,UAAU,EAAE,OAFd;AAGEC,EAAAA,iBAAiB,EAAE;AAAA,QAAGC,UAAH,QAAGA,UAAH;AAAA,WAAqB;AACtCC,MAAAA,eAAe,EAAE,KADqB;AAEtCC,MAAAA,gBAAgB,EAAEC,MAAM,CAACD;AAFa,KAArB;AAAA,GAHrB;AAOEE,EAAAA,SAAS,EAAE;AAAEC,IAAAA,eAAe,EAAE;AAAnB;AAPb,CANmC,CAAvC;AAkBA,IAAMC,aAAa,GAAGhC,oBAAoB,CACtC;AACEkB,EAAAA,UAAU,EAAE;AAAEE,IAAAA,MAAM,EAAEF;AAAV,GADd;AAEEf,EAAAA,YAAY,EAAE;AAAEiB,IAAAA,MAAM,EAAEjB;AAAV;AAFhB,CADsC,EAKtC;AAEEqB,EAAAA,UAAU,EAAE,MAFd;AAGED,EAAAA,gBAAgB,EAAE,cAHpB;AAIEU,EAAAA,gBAAgB,EAAE1B,kBAJpB;AAKEkB,EAAAA,iBAAiB,EAAE;AAAA,QAAGC,UAAH,SAAGA,UAAH;AAAA,WAAqB;AACtCQ,MAAAA,KAAK,EAAE;AAD+B,KAArB;AAAA;AALrB,CALsC,CAA1C;AAgBA,IAAMC,sBAAsB,GAAGjC,oBAAoB,CAAC8B,aAAD,EAAgB,MAAhB,CAAnD;;AAEA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAAApB,KAAK;AAAA,SAAK;AAChCA,IAAAA,KAAK,EAAEA,KAAK,CAACC;AADmB,GAAL;AAAA,CAA7B;;AAIA,IAAMoB,YAAY,GAAGtC,OAAO,CAACqC,eAAD,CAAP,CAAyBD,sBAAzB,CAArB;AAGA,SAASH,aAAT,EAAwBK,YAAxB,EAAsCtB,UAAtC","sourcesContent":["import { Animated, Easing} from \"react-native\";\nimport { connect } from \"react-redux\";\nimport {createStackNavigator} from 'react-navigation-stack'\nimport { createReactNavigationReduxMiddleware, createReduxContainer \n        } from \"react-navigation-redux-helpers\";\nimport TabNavigator from \"./TabNavigator\";\nimport LoginScreen from \"../screens/Login\";\nimport SignupScreen from \"../screens/Signup\";\nimport WelcomeScreen from \"../screens/WelcomeScreen\";\n\nconst noTransitionConfig = () => ({\n    transitionSpec: {\n      duration: 0,\n      timing: Animated.timing,\n      easing: Easing.step0\n    }\n  });\n\n  const middleware = createReactNavigationReduxMiddleware(\n    state => state.nav\n  );\n\n  // Login stack\nconst LoginStack = createStackNavigator(\n    {\n      Login: { screen: LoginScreen },\n      Signup: { screen: SignupScreen },\n      Welcome: { screen: WelcomeScreen }\n    },\n    {\n      initialRouteName: \"Welcome\",\n      headerMode: \"float\",\n      navigationOptions: ({ navigation }) => ({\n        headerTintColor: \"red\",\n        headerTitleStyle: styles.headerTitleStyle\n      }),\n      cardStyle: { backgroundColor: \"#FFFFFF\" }\n    }\n  );\n\n// Manifest of possible screens\nconst RootNavigator = createStackNavigator(\n    {\n      LoginStack: { screen: LoginStack },\n      TabNavigator: { screen: TabNavigator }\n    },\n    {\n      // Default config for all screens\n      headerMode: \"none\",\n      initialRouteName: \"TabNavigator\",\n      transitionConfig: noTransitionConfig,\n      navigationOptions: ({ navigation }) => ({\n        color: \"black\"\n      })\n    }\n  );\n\nconst AppWithNavigationState = createReduxContainer(RootNavigator, \"root\");\n\nconst mapStateToProps = state => ({\n  state: state.nav\n});\n\nconst AppNavigator = connect(mapStateToProps)(AppWithNavigationState);\n\n\nexport { RootNavigator, AppNavigator, middleware };"]},"metadata":{},"sourceType":"module"}