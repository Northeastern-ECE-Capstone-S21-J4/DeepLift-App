{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { NavigationActions } from \"react-navigation\";\nimport { combineReducers } from \"redux\";\nimport auther from '@react-native-firebase/auth';\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport { RootNavigator } from \"../navigation/AppNavigator\";\nvar firstAction = RootNavigator.router.getActionForPathAndParams(\"Login\");\nvar initialNavState = RootNavigator.router.getStateForAction(firstAction);\n\nfunction nav() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialNavState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var nextState;\n\n  switch (action.type) {\n    case \"Login\":\n      nextState = RootNavigator.router.getStateForAction(NavigationActions.navigate({\n        routeName: \"TabNavigator\"\n      }), state);\n      break;\n\n    case \"Logout\":\n      try {\n        auther().signOut();\n        nextState = RootNavigator.router.getStateForAction(NavigationActions.navigate({\n          routeName: \"LoginStack\"\n        }), state);\n      } catch (e) {\n        console.log(e);\n      }\n\n      break;\n\n    default:\n      nextState = RootNavigator.router.getStateForAction(action, state);\n      break;\n  }\n\n  return nextState || state;\n}\n\nvar initialAuthState = {\n  isLoggedIn: false\n};\n\nfunction auth() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialAuthState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"Login\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: true,\n        user: action.user\n      });\n\n    case \"Logout\":\n      AsyncStorage.removeItem(\"@loggedInUserID:id\");\n      AsyncStorage.removeItem(\"@loggedInUserID:key\");\n      AsyncStorage.removeItem(\"@loggedInUserID:password\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isLoggedIn: false,\n        user: {}\n      });\n\n    default:\n      return state;\n  }\n}\n\nvar AppReducer = combineReducers({\n  nav: nav,\n  auth: auth\n});\nexport default AppReducer;","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/reducers/index.js"],"names":["NavigationActions","combineReducers","auther","AsyncStorage","RootNavigator","firstAction","router","getActionForPathAndParams","initialNavState","getStateForAction","nav","state","action","nextState","type","navigate","routeName","signOut","e","console","log","initialAuthState","isLoggedIn","auth","user","removeItem","AppReducer"],"mappings":";;;;;;AAAA,SAASA,iBAAT,QAAkC,kBAAlC;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAOC,MAAP,MAAmB,6BAAnB;SACSC,Y;AAET,SAASC,aAAT;AAGA,IAAMC,WAAW,GAAGD,aAAa,CAACE,MAAd,CAAqBC,yBAArB,CAClB,OADkB,CAApB;AAGA,IAAMC,eAAe,GAAGJ,aAAa,CAACE,MAAd,CAAqBG,iBAArB,CAAuCJ,WAAvC,CAAxB;;AAEA,SAASK,GAAT,GAA8C;AAAA,MAAjCC,KAAiC,uEAAzBH,eAAyB;AAAA,MAARI,MAAQ;AAC5C,MAAIC,SAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAK,OAAL;AACED,MAAAA,SAAS,GAAGT,aAAa,CAACE,MAAd,CAAqBG,iBAArB,CACVT,iBAAiB,CAACe,QAAlB,CAA2B;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAA3B,CADU,EAEVL,KAFU,CAAZ;AAIA;;AACF,SAAK,QAAL;AACE,UAAI;AACFT,QAAAA,MAAM,GAAGe,OAAT;AACAJ,QAAAA,SAAS,GAAGT,aAAa,CAACE,MAAd,CAAqBG,iBAArB,CACVT,iBAAiB,CAACe,QAAlB,CAA2B;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAA3B,CADU,EAEVL,KAFU,CAAZ;AAID,OAND,CAME,OAAOO,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;;AACD;;AACF;AACEL,MAAAA,SAAS,GAAGT,aAAa,CAACE,MAAd,CAAqBG,iBAArB,CAAuCG,MAAvC,EAA+CD,KAA/C,CAAZ;AACA;AApBJ;;AAwBA,SAAOE,SAAS,IAAIF,KAApB;AACD;;AAED,IAAMU,gBAAgB,GAAG;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAzB;;AAEA,SAASC,IAAT,GAAgD;AAAA,MAAlCZ,KAAkC,uEAA1BU,gBAA0B;AAAA,MAART,MAAQ;;AAC9C,UAAQA,MAAM,CAACE,IAAf;AACE,SAAK,OAAL;AACE,6CAAYH,KAAZ;AAAmBW,QAAAA,UAAU,EAAE,IAA/B;AAAqCE,QAAAA,IAAI,EAAEZ,MAAM,CAACY;AAAlD;;AACF,SAAK,QAAL;AACErB,MAAAA,YAAY,CAACsB,UAAb,CAAwB,oBAAxB;AACAtB,MAAAA,YAAY,CAACsB,UAAb,CAAwB,qBAAxB;AACAtB,MAAAA,YAAY,CAACsB,UAAb,CAAwB,0BAAxB;AACA,6CAAYd,KAAZ;AAAmBW,QAAAA,UAAU,EAAE,KAA/B;AAAsCE,QAAAA,IAAI,EAAE;AAA5C;;AACF;AACE,aAAOb,KAAP;AATJ;AAWD;;AAED,IAAMe,UAAU,GAAGzB,eAAe,CAAC;AACjCS,EAAAA,GAAG,EAAHA,GADiC;AAEjCa,EAAAA,IAAI,EAAJA;AAFiC,CAAD,CAAlC;AAKA,eAAeG,UAAf","sourcesContent":["import { NavigationActions } from \"react-navigation\";\nimport { combineReducers } from \"redux\";\n\nimport auther from '@react-native-firebase/auth';\nimport { AsyncStorage } from \"react-native\";\n\nimport { RootNavigator } from \"../navigation/AppNavigator\";\n\n// Start with two routes: The Main screen, with the Login screen on top.\nconst firstAction = RootNavigator.router.getActionForPathAndParams(\n  \"Login\"\n);\nconst initialNavState = RootNavigator.router.getStateForAction(firstAction);\n\nfunction nav(state = initialNavState, action) {\n  let nextState;\n  switch (action.type) {\n    case \"Login\":\n      nextState = RootNavigator.router.getStateForAction(\n        NavigationActions.navigate({ routeName: \"TabNavigator\" }),\n        state\n      );\n      break;\n    case \"Logout\":\n      try {\n        auther().signOut();\n        nextState = RootNavigator.router.getStateForAction(\n          NavigationActions.navigate({ routeName: \"LoginStack\" }),\n          state\n        );\n      } catch (e) {\n        console.log(e);\n      }\n      break;\n    default:\n      nextState = RootNavigator.router.getStateForAction(action, state);\n      break;\n  }\n\n  // Simply return the original `state` if `nextState` is null or undefined.\n  return nextState || state;\n}\n\nconst initialAuthState = { isLoggedIn: false };\n\nfunction auth(state = initialAuthState, action) {\n  switch (action.type) {\n    case \"Login\":\n      return { ...state, isLoggedIn: true, user: action.user };\n    case \"Logout\":\n      AsyncStorage.removeItem(\"@loggedInUserID:id\");\n      AsyncStorage.removeItem(\"@loggedInUserID:key\");\n      AsyncStorage.removeItem(\"@loggedInUserID:password\");\n      return { ...state, isLoggedIn: false, user: {} };\n    default:\n      return state;\n  }\n}\n\nconst AppReducer = combineReducers({\n  nav,\n  auth\n});\n\nexport default AppReducer;\n"]},"metadata":{},"sourceType":"module"}