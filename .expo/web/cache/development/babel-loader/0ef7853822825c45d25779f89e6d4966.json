{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar NativeGraphRequestManager = require('react-native').NativeModules.FBGraphRequest;\n\nfunction _verifyParameters(request) {\n  if (request.config && request.config.parameters) {\n    for (var key in request.config.parameters) {\n      var param = request.config.parameters[key];\n\n      if (typeof param === 'object' && param.string) {\n        continue;\n      }\n\n      throw new Error(\"Unexpected value for parameter '\" + key + \"'. Request parameters \" + \"need to be objects with a 'string' field.\");\n    }\n  }\n}\n\nvar FBGraphRequestManager = function () {\n  function FBGraphRequestManager() {\n    _classCallCheck(this, FBGraphRequestManager);\n\n    this.requestBatch = [];\n    this.requestCallbacks = [];\n  }\n\n  _createClass(FBGraphRequestManager, [{\n    key: \"addRequest\",\n    value: function addRequest(request) {\n      _verifyParameters(request);\n\n      this.requestBatch.push(request);\n      this.requestCallbacks.push(request.callback);\n      return this;\n    }\n  }, {\n    key: \"addBatchCallback\",\n    value: function addBatchCallback(callback) {\n      this.batchCallback = callback;\n      return this;\n    }\n  }, {\n    key: \"start\",\n    value: function start(timeout) {\n      var that = this;\n\n      var callback = function callback(error, result, response) {\n        if (response) {\n          that.requestCallbacks.forEach(function (innerCallback, index, array) {\n            if (innerCallback) {\n              innerCallback(response[index][0], response[index][1]);\n            }\n          });\n        }\n\n        if (that.batchCallback) {\n          that.batchCallback(error, result);\n        }\n      };\n\n      NativeGraphRequestManager.start(this.requestBatch, timeout || 0, callback);\n    }\n  }]);\n\n  return FBGraphRequestManager;\n}();\n\nmodule.exports = FBGraphRequestManager;","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/node_modules/react-native-fbsdk/js/FBGraphRequestManager.js"],"names":["NativeGraphRequestManager","require","NativeModules","FBGraphRequest","_verifyParameters","request","config","parameters","key","param","string","Error","FBGraphRequestManager","requestBatch","requestCallbacks","push","callback","batchCallback","timeout","that","error","result","response","forEach","innerCallback","index","array","start","module","exports"],"mappings":"AAuBA;;;;;;AAEA,IAAMA,yBAAyB,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,aAAxB,CAC/BC,cADH;;AAOA,SAASC,iBAAT,CAA2BC,OAA3B,EAAkD;AAChD,MAAIA,OAAO,CAACC,MAAR,IAAkBD,OAAO,CAACC,MAAR,CAAeC,UAArC,EAAiD;AAC/C,SAAK,IAAIC,GAAT,IAAgBH,OAAO,CAACC,MAAR,CAAeC,UAA/B,EAA2C;AACzC,UAAIE,KAAK,GAAGJ,OAAO,CAACC,MAAR,CAAeC,UAAf,CAA0BC,GAA1B,CAAZ;;AACA,UAAI,OAAOC,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,MAAvC,EAA+C;AAC7C;AACD;;AACD,YAAM,IAAIC,KAAJ,CACJ,qCACEH,GADF,GAEE,wBAFF,GAGE,2CAJE,CAAN;AAMD;AACF;AACF;;IAEKI,qB;AAKJ,mCAAc;AAAA;;AACZ,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACD;;;;WAKD,oBAAWT,OAAX,EAAyD;AACvDD,MAAAA,iBAAiB,CAACC,OAAD,CAAjB;;AACA,WAAKQ,YAAL,CAAkBE,IAAlB,CAAuBV,OAAvB;AACA,WAAKS,gBAAL,CAAsBC,IAAtB,CAA2BV,OAAO,CAACW,QAAnC;AACA,aAAO,IAAP;AACD;;;WAOD,0BACEA,QADF,EAEyB;AACvB,WAAKC,aAAL,GAAqBD,QAArB;AACA,aAAO,IAAP;AACD;;;WAYD,eAAME,OAAN,EAAwB;AACtB,UAAMC,IAAI,GAAG,IAAb;;AACA,UAAMH,QAAQ,GAAG,SAAXA,QAAW,CAACI,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,EAA6B;AAC5C,YAAIA,QAAJ,EAAc;AACZH,UAAAA,IAAI,CAACL,gBAAL,CAAsBS,OAAtB,CAA8B,UAACC,aAAD,EAAgBC,KAAhB,EAAuBC,KAAvB,EAAiC;AAC7D,gBAAIF,aAAJ,EAAmB;AACjBA,cAAAA,aAAa,CAACF,QAAQ,CAACG,KAAD,CAAR,CAAgB,CAAhB,CAAD,EAAqBH,QAAQ,CAACG,KAAD,CAAR,CAAgB,CAAhB,CAArB,CAAb;AACD;AACF,WAJD;AAKD;;AACD,YAAIN,IAAI,CAACF,aAAT,EAAwB;AACtBE,UAAAA,IAAI,CAACF,aAAL,CAAmBG,KAAnB,EAA0BC,MAA1B;AACD;AACF,OAXD;;AAaArB,MAAAA,yBAAyB,CAAC2B,KAA1B,CAAgC,KAAKd,YAArC,EAAmDK,OAAO,IAAI,CAA9D,EAAiEF,QAAjE;AACD;;;;;;AAGHY,MAAM,CAACC,OAAP,GAAiBjB,qBAAjB","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst NativeGraphRequestManager = require('react-native').NativeModules\n  .FBGraphRequest;\n\nimport type GraphRequest from './FBGraphRequest';\n\ntype Callback = (error: ?Object, result: ?Object) => void;\n\nfunction _verifyParameters(request: GraphRequest) {\n  if (request.config && request.config.parameters) {\n    for (var key in request.config.parameters) {\n      var param = request.config.parameters[key];\n      if (typeof param === 'object' && param.string) {\n        continue;\n      }\n      throw new Error(\n        \"Unexpected value for parameter '\" +\n          key +\n          \"'. Request parameters \" +\n          \"need to be objects with a 'string' field.\",\n      );\n    }\n  }\n}\n\nclass FBGraphRequestManager {\n  requestBatch: Array<GraphRequest>;\n  requestCallbacks: Array<?Callback>;\n  batchCallback: Callback;\n\n  constructor() {\n    this.requestBatch = [];\n    this.requestCallbacks = [];\n  }\n\n  /**\n   * Add a graph request.\n   */\n  addRequest(request: GraphRequest): FBGraphRequestManager {\n    _verifyParameters(request);\n    this.requestBatch.push(request);\n    this.requestCallbacks.push(request.callback);\n    return this;\n  }\n\n  /**\n   * Add call back to the GraphRequestManager. Only one callback can be added.\n   * Note that invocation of the batch callback does not indicate success of every\n   * graph request made, only that the entire batch has finished executing.\n   */\n  addBatchCallback(\n    callback: (error: ?Object, result: ?Object) => void,\n  ): FBGraphRequestManager {\n    this.batchCallback = callback;\n    return this;\n  }\n\n  /**\n   * Executes requests in a batch.\n   * Note that when there's an issue with network connection the batch callback\n   * behavior differs in Android and iOS.\n   * On iOS, the batch callback returns an error if the batch fails with a network error.\n   * On Android, the batch callback always returns {\"result\": \"batch finished executing\"}\n   * after the batch time out. This is because detecting network status requires\n   * extra permission and it's unncessary for the sdk. Instead, you can use the NetInfo module\n   * in react-native to get the network status.\n   */\n  start(timeout: ?number) {\n    const that = this;\n    const callback = (error, result, response) => {\n      if (response) {\n        that.requestCallbacks.forEach((innerCallback, index, array) => {\n          if (innerCallback) {\n            innerCallback(response[index][0], response[index][1]);\n          }\n        });\n      }\n      if (that.batchCallback) {\n        that.batchCallback(error, result);\n      }\n    };\n\n    NativeGraphRequestManager.start(this.requestBatch, timeout || 0, callback);\n  }\n}\n\nmodule.exports = FBGraphRequestManager;\n"]},"metadata":{},"sourceType":"script"}