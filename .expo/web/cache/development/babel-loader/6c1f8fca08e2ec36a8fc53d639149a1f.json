{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { isAndroid, isArray, isBoolean, isDate, isNull, isNumber, isObject, isString, isUndefined } from '@react-native-firebase/app/lib/common';\nimport FirestoreBlob from \"../FirestoreBlob\";\nimport { DOCUMENT_ID } from \"../FirestoreFieldPath\";\nimport FirestoreGeoPoint from \"../FirestoreGeoPoint\";\nimport FirestorePath from \"../FirestorePath\";\nimport FirestoreTimestamp from \"../FirestoreTimestamp\";\nimport { getTypeMapInt, getTypeMapName } from \"./typemap\";\nvar FirestoreDocumentReference = null;\nexport function provideDocumentReferenceClass(documentReference) {\n  FirestoreDocumentReference = documentReference;\n}\nvar FirestoreFieldValue = null;\nexport function provideFieldValueClass(fieldValue) {\n  FirestoreFieldValue = fieldValue;\n}\nexport function buildNativeMap(data) {\n  var nativeData = {};\n\n  if (data) {\n    var keys = Object.keys(data);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var typeMap = generateNativeData(data[key]);\n\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    }\n  }\n\n  return nativeData;\n}\nexport function buildNativeArray(array) {\n  var nativeArray = [];\n\n  if (array) {\n    for (var i = 0; i < array.length; i++) {\n      var value = array[i];\n      var typeMap = generateNativeData(value);\n\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    }\n  }\n\n  return nativeArray;\n}\nexport function generateNativeData(value) {\n  if (Number.isNaN(value)) {\n    return getTypeMapInt('nan');\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return getTypeMapInt('-infinity');\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return getTypeMapInt('infinity');\n  }\n\n  if (isNull(value) || isUndefined(value)) {\n    return getTypeMapInt('null');\n  }\n\n  if (value === DOCUMENT_ID) {\n    return getTypeMapInt('documentid');\n  }\n\n  if (isBoolean(value)) {\n    if (value === true) {\n      return getTypeMapInt('booleanTrue');\n    }\n\n    return getTypeMapInt('booleanFalse');\n  }\n\n  if (isNumber(value)) {\n    if (isAndroid) {\n      return getTypeMapInt('number', value.toString());\n    }\n\n    return getTypeMapInt('number', value);\n  }\n\n  if (isString(value)) {\n    if (value === '') {\n      return getTypeMapInt('stringEmpty');\n    }\n\n    return getTypeMapInt('string', value);\n  }\n\n  if (isArray(value)) {\n    return getTypeMapInt('array', buildNativeArray(value));\n  }\n\n  if (isObject(value)) {\n    if (value instanceof FirestoreDocumentReference) {\n      return getTypeMapInt('reference', value.path);\n    }\n\n    if (value instanceof FirestoreGeoPoint) {\n      return getTypeMapInt('geopoint', [value.latitude, value.longitude]);\n    }\n\n    if (isDate(value)) {\n      var timestamp = FirestoreTimestamp.fromDate(value);\n      return getTypeMapInt('timestamp', [timestamp.seconds, timestamp.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreTimestamp) {\n      return getTypeMapInt('timestamp', [value.seconds, value.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreBlob) {\n      return getTypeMapInt('blob', value.toBase64());\n    }\n\n    if (value instanceof FirestoreFieldValue) {\n      return getTypeMapInt('fieldvalue', [value._type, value._elements]);\n    }\n\n    return getTypeMapInt('object', buildNativeMap(value));\n  }\n\n  console.warn(\"Unknown data type received \" + value);\n  return getTypeMapInt('unknown');\n}\nexport function parseNativeMap(firestore, nativeData) {\n  var data;\n\n  if (nativeData) {\n    data = {};\n    var entries = Object.entries(nativeData);\n\n    for (var i = 0; i < entries.length; i++) {\n      var _entries$i = _slicedToArray(entries[i], 2),\n          key = _entries$i[0],\n          typeArray = _entries$i[1];\n\n      data[key] = parseNativeData(firestore, typeArray);\n    }\n  }\n\n  return data;\n}\nexport function parseNativeArray(firestore, nativeArray) {\n  var array = [];\n\n  if (nativeArray) {\n    for (var i = 0; i < nativeArray.length; i++) {\n      array.push(parseNativeData(firestore, nativeArray[i]));\n    }\n  }\n\n  return array;\n}\nexport function parseNativeData(firestore, nativeArray) {\n  var _nativeArray = _slicedToArray(nativeArray, 2),\n      int = _nativeArray[0],\n      value = _nativeArray[1];\n\n  var type = getTypeMapName(int);\n\n  switch (type) {\n    case 'nan':\n      return NaN;\n\n    case '-infinity':\n      return -Infinity;\n\n    case 'infinity':\n      return Infinity;\n\n    case 'null':\n      return null;\n\n    case 'booleanTrue':\n      return true;\n\n    case 'booleanFalse':\n      return false;\n\n    case 'number':\n    case 'string':\n      return value;\n\n    case 'stringEmpty':\n      return '';\n\n    case 'array':\n      return parseNativeArray(firestore, value);\n\n    case 'object':\n      return parseNativeMap(firestore, value);\n\n    case 'reference':\n      return new FirestoreDocumentReference(firestore, FirestorePath.fromName(value));\n\n    case 'geopoint':\n      return new FirestoreGeoPoint(value[0], value[1]);\n\n    case 'timestamp':\n      return new FirestoreTimestamp(value[0], value[1]);\n\n    case 'blob':\n      return FirestoreBlob.fromBase64String(value);\n\n    default:\n      console.warn(\"Unknown data type received from native channel: \" + type);\n      return value;\n  }\n}","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/node_modules/@react-native-firebase/firestore/lib/utils/serialize.js"],"names":["isAndroid","isArray","isBoolean","isDate","isNull","isNumber","isObject","isString","isUndefined","FirestoreBlob","DOCUMENT_ID","FirestoreGeoPoint","FirestorePath","FirestoreTimestamp","getTypeMapInt","getTypeMapName","FirestoreDocumentReference","provideDocumentReferenceClass","documentReference","FirestoreFieldValue","provideFieldValueClass","fieldValue","buildNativeMap","data","nativeData","keys","Object","i","length","key","typeMap","generateNativeData","buildNativeArray","array","nativeArray","value","push","Number","isNaN","NEGATIVE_INFINITY","POSITIVE_INFINITY","toString","path","latitude","longitude","timestamp","fromDate","seconds","nanoseconds","toBase64","_type","_elements","console","warn","parseNativeMap","firestore","entries","typeArray","parseNativeData","parseNativeArray","int","type","NaN","Infinity","fromName","fromBase64String"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isAndroid,\n  isArray,\n  isBoolean,\n  isDate,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n} from '@react-native-firebase/app/lib/common';\nimport FirestoreBlob from '../FirestoreBlob';\nimport { DOCUMENT_ID } from '../FirestoreFieldPath';\nimport FirestoreGeoPoint from '../FirestoreGeoPoint';\nimport FirestorePath from '../FirestorePath';\nimport FirestoreTimestamp from '../FirestoreTimestamp';\nimport { getTypeMapInt, getTypeMapName } from './typemap';\n\n// To avoid React Native require cycle warnings\nlet FirestoreDocumentReference = null;\nexport function provideDocumentReferenceClass(documentReference) {\n  FirestoreDocumentReference = documentReference;\n}\n\nlet FirestoreFieldValue = null;\nexport function provideFieldValueClass(fieldValue) {\n  FirestoreFieldValue = fieldValue;\n}\n\n/**\n *\n * @param data\n */\nexport function buildNativeMap(data) {\n  const nativeData = {};\n  if (data) {\n    const keys = Object.keys(data);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      const typeMap = generateNativeData(data[key]);\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    }\n  }\n  return nativeData;\n}\n\n/**\n *\n * @param array\n * @returns {Array}\n */\nexport function buildNativeArray(array) {\n  const nativeArray = [];\n  if (array) {\n    for (let i = 0; i < array.length; i++) {\n      const value = array[i];\n      const typeMap = generateNativeData(value);\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    }\n  }\n  return nativeArray;\n}\n\n/**\n * Creates a lightweight array of an object value to be sent over the bridge.\n * The type is convered to an integer which is handled on the native side\n * to create the correct types.\n *\n * Example: [7, 'some string'];\n *\n * @param value\n * @returns {*}\n */\nexport function generateNativeData(value) {\n  if (Number.isNaN(value)) {\n    return getTypeMapInt('nan');\n  }\n\n  if (value === Number.NEGATIVE_INFINITY) {\n    return getTypeMapInt('-infinity');\n  }\n\n  if (value === Number.POSITIVE_INFINITY) {\n    return getTypeMapInt('infinity');\n  }\n\n  if (isNull(value) || isUndefined(value)) {\n    return getTypeMapInt('null');\n  }\n\n  if (value === DOCUMENT_ID) {\n    return getTypeMapInt('documentid');\n  }\n\n  if (isBoolean(value)) {\n    if (value === true) {\n      return getTypeMapInt('booleanTrue');\n    }\n    return getTypeMapInt('booleanFalse');\n  }\n\n  if (isNumber(value)) {\n    if (isAndroid) {\n      return getTypeMapInt('number', value.toString());\n    }\n    return getTypeMapInt('number', value);\n  }\n\n  if (isString(value)) {\n    if (value === '') {\n      return getTypeMapInt('stringEmpty');\n    }\n    return getTypeMapInt('string', value);\n  }\n\n  if (isArray(value)) {\n    return getTypeMapInt('array', buildNativeArray(value));\n  }\n\n  if (isObject(value)) {\n    if (value instanceof FirestoreDocumentReference) {\n      return getTypeMapInt('reference', value.path);\n    }\n\n    if (value instanceof FirestoreGeoPoint) {\n      return getTypeMapInt('geopoint', [value.latitude, value.longitude]);\n    }\n\n    // Handle Date objects are Timestamps as per web sdk\n    if (isDate(value)) {\n      const timestamp = FirestoreTimestamp.fromDate(value);\n      return getTypeMapInt('timestamp', [timestamp.seconds, timestamp.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreTimestamp) {\n      return getTypeMapInt('timestamp', [value.seconds, value.nanoseconds]);\n    }\n\n    if (value instanceof FirestoreBlob) {\n      return getTypeMapInt('blob', value.toBase64());\n    }\n\n    if (value instanceof FirestoreFieldValue) {\n      return getTypeMapInt('fieldvalue', [value._type, value._elements]);\n    }\n\n    return getTypeMapInt('object', buildNativeMap(value));\n  }\n\n  // eslint-disable-next-line no-console\n  console.warn(`Unknown data type received ${value}`);\n\n  return getTypeMapInt('unknown');\n}\n\n/**\n *\n * @param firestore\n * @param nativeData\n */\nexport function parseNativeMap(firestore, nativeData) {\n  let data;\n  if (nativeData) {\n    data = {};\n    const entries = Object.entries(nativeData);\n    for (let i = 0; i < entries.length; i++) {\n      const [key, typeArray] = entries[i];\n      data[key] = parseNativeData(firestore, typeArray);\n    }\n  }\n  return data;\n}\n\n/**\n *\n * @param firestore\n * @param nativeArray\n * @returns {Array}\n */\nexport function parseNativeArray(firestore, nativeArray) {\n  const array = [];\n  if (nativeArray) {\n    for (let i = 0; i < nativeArray.length; i++) {\n      array.push(parseNativeData(firestore, nativeArray[i]));\n    }\n  }\n  return array;\n}\n\n/**\n * Data returned from native is constructed in the same way it sent to keep\n * payloads over the bridge as small as possible. The index matches to a type\n * which is then created on JS land.\n *\n * Example: [7, 'string']\n *\n * @param firestore\n * @param nativeArray\n * @returns *\n */\nexport function parseNativeData(firestore, nativeArray) {\n  const [int, value] = nativeArray;\n  const type = getTypeMapName(int);\n\n  switch (type) {\n    case 'nan':\n      return NaN;\n    case '-infinity':\n      return -Infinity;\n    case 'infinity':\n      return Infinity;\n    case 'null':\n      return null;\n    case 'booleanTrue':\n      return true;\n    case 'booleanFalse':\n      return false;\n    case 'number':\n    case 'string':\n      return value;\n    case 'stringEmpty':\n      return '';\n    case 'array':\n      return parseNativeArray(firestore, value);\n    case 'object':\n      return parseNativeMap(firestore, value);\n    case 'reference':\n      return new FirestoreDocumentReference(firestore, FirestorePath.fromName(value));\n    case 'geopoint':\n      return new FirestoreGeoPoint(value[0], value[1]);\n    case 'timestamp':\n      return new FirestoreTimestamp(value[0], value[1]);\n    case 'blob':\n      return FirestoreBlob.fromBase64String(value);\n    default:\n      // eslint-disable-next-line no-console\n      console.warn(`Unknown data type received from native channel: ${type}`);\n      return value;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}