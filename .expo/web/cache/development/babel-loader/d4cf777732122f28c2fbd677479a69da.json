{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/630556369qqcom/Desktop/DeepLift-App/node_modules/react-navigation-redux-helpers/src/create-redux-container.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport { ThemeProvider, NavigationProvider } from '@react-navigation/core';\nimport { initializeListeners, createDidUpdateCallback, createNavigationPropConstructor } from \"./middleware\";\n\nfunction createReduxContainer(Navigator) {\n  var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"root\";\n  var didUpdateCallback = createDidUpdateCallback(key);\n  var propConstructor = createNavigationPropConstructor(key);\n\n  var NavigatorReduxWrapper = function (_React$PureComponent) {\n    _inherits(NavigatorReduxWrapper, _React$PureComponent);\n\n    var _super = _createSuper(NavigatorReduxWrapper);\n\n    function NavigatorReduxWrapper() {\n      var _this;\n\n      _classCallCheck(this, NavigatorReduxWrapper);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n\n      _this.getCurrentNavigation = function () {\n        return _this.currentNavProp;\n      };\n\n      return _this;\n    }\n\n    _createClass(NavigatorReduxWrapper, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        initializeListeners(key, this.props.state);\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        didUpdateCallback();\n      }\n    }, {\n      key: \"theme\",\n      get: function get() {\n        if (this.props.theme === 'light' || this.props.theme === 'dark') {\n          return this.props.theme;\n        } else if (this.props.theme === 'no-preference') {\n          return 'light';\n        } else {\n          console.warn(\"Invalid theme provided: \" + this.props.theme + \". Only 'light' and 'dark' are supported. Falling back to 'light'\");\n          return 'light';\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            dispatch = _this$props.dispatch,\n            state = _this$props.state,\n            props = _objectWithoutProperties(_this$props, [\"dispatch\", \"state\"]);\n\n        this.currentNavProp = propConstructor(dispatch, state, Navigator.router, this.getCurrentNavigation);\n        return React.createElement(ThemeProvider, {\n          value: this.theme,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 9\n          }\n        }, React.createElement(NavigationProvider, {\n          value: this.currentNavProp,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }\n        }, React.createElement(Navigator, _extends({}, props, {\n          navigation: this.currentNavProp,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }\n        }))));\n      }\n    }]);\n\n    return NavigatorReduxWrapper;\n  }(React.PureComponent);\n\n  NavigatorReduxWrapper.router = Navigator.router;\n  NavigatorReduxWrapper.defaultProps = {\n    theme: 'no-preference'\n  };\n  return NavigatorReduxWrapper;\n}\n\nexport { createReduxContainer };","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/node_modules/react-navigation-redux-helpers/src/create-redux-container.js"],"names":["React","ThemeProvider","NavigationProvider","initializeListeners","createDidUpdateCallback","createNavigationPropConstructor","createReduxContainer","Navigator","key","didUpdateCallback","propConstructor","NavigatorReduxWrapper","getCurrentNavigation","currentNavProp","props","state","theme","console","warn","dispatch","router","PureComponent","defaultProps"],"mappings":";;;;;;;;;;;;;AAWA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,wBAAlD;AAEA,SACEC,mBADF,EAEEC,uBAFF,EAGEC,+BAHF;;AAaA,SAASC,oBAAT,CAeEC,SAfF,EAiBuC;AAAA,MADrCC,GACqC,uEADtB,MACsB;AACrC,MAAMC,iBAAiB,GAAGL,uBAAuB,CAACI,GAAD,CAAjD;AACA,MAAME,eAAe,GAAGL,+BAA+B,CAACG,GAAD,CAAvD;;AAFqC,MAI/BG,qBAJ+B;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA,YAkBnCC,oBAlBmC,GAkBZ,YAAM;AAC3B,eAAO,MAAKC,cAAZ;AACD,OApBkC;;AAAA;AAAA;;AAAA;AAAA;AAAA,aAUnC,6BAAoB;AAClBV,QAAAA,mBAAmB,CAACK,GAAD,EAAM,KAAKM,KAAL,CAAWC,KAAjB,CAAnB;AACD;AAZkC;AAAA;AAAA,aAcnC,8BAAqB;AACnBN,QAAAA,iBAAiB;AAClB;AAhBkC;AAAA;AAAA,WAsBnC,eAAY;AACV,YAAI,KAAKK,KAAL,CAAWE,KAAX,KAAqB,OAArB,IAAgC,KAAKF,KAAL,CAAWE,KAAX,KAAqB,MAAzD,EAAiE;AAC/D,iBAAO,KAAKF,KAAL,CAAWE,KAAlB;AACD,SAFD,MAEO,IAAI,KAAKF,KAAL,CAAWE,KAAX,KAAqB,eAAzB,EAA0C;AAC/C,iBAAO,OAAP;AACD,SAFM,MAEA;AACLC,UAAAA,OAAO,CAACC,IAAR,8BAEI,KAAKJ,KAAL,CAAWE,KAFf;AAKA,iBAAO,OAAP;AACD;AACF;AAnCkC;AAAA;AAAA,aAqCnC,kBAAS;AAAA,0BAC+B,KAAKF,KADpC;AAAA,YACCK,QADD,eACCA,QADD;AAAA,YACWJ,KADX,eACWA,KADX;AAAA,YACqBD,KADrB;;AAEP,aAAKD,cAAL,GAAsBH,eAAe,CACnCS,QADmC,EAEnCJ,KAFmC,EAGnCR,SAAS,CAACa,MAHyB,EAInC,KAAKR,oBAJ8B,CAArC;AAMA,eACE,oBAAC,aAAD;AAAe,UAAA,KAAK,EAAE,KAAKI,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,kBAAD;AAAoB,UAAA,KAAK,EAAE,KAAKH,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD,eACMC,KADN;AAEE,UAAA,UAAU,EAAE,KAAKD,cAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADF,CADF;AAUD;AAvDkC;;AAAA;AAAA,IAIDb,KAAK,CAACqB,aAJL;;AAI/BV,EAAAA,qBAJ+B,CAM5BS,MAN4B,GAMnBb,SAAS,CAACa,MANS;AAI/BT,EAAAA,qBAJ+B,CAQ5BW,YAR4B,GAQb;AAAEN,IAAAA,KAAK,EAAE;AAAT,GARa;AA2DrC,SAAOL,qBAAP;AACD;;AAED,SACEL,oBADF","sourcesContent":["// @flow\n\nimport type {\n  NavigationState,\n  NavigationDispatch,\n  NavigationNavigator,\n  NavigationScreenProp,\n  NavigationNavigatorProps,\n  SupportedThemes,\n} from '@react-navigation/core';\n\nimport * as React from 'react';\nimport { ThemeProvider, NavigationProvider } from '@react-navigation/core';\n\nimport {\n  initializeListeners,\n  createDidUpdateCallback,\n  createNavigationPropConstructor,\n} from './middleware';\n\ntype RequiredProps<State: NavigationState> = {\n  state: State,\n  dispatch: NavigationDispatch,\n};\ntype InjectedProps<State: NavigationState> = {\n  navigation: NavigationScreenProp<State>,\n};\nfunction createReduxContainer<\n  State: NavigationState,\n  Options: {},\n  NavigatorProps: NavigationNavigatorProps<Options, State>,\n  NavigatorType: NavigationNavigator<\n    State,\n    Options,\n    NavigatorProps,\n  >,\n  ContainerProps: {\n    ...$Diff<NavigatorProps, InjectedProps<State>>,\n    ...$Exact<RequiredProps<State>>,\n    theme: SupportedThemes | 'no-preference',\n  },\n>(\n  Navigator: NavigatorType,\n  key?: string = \"root\",\n): React.ComponentType<ContainerProps> {\n  const didUpdateCallback = createDidUpdateCallback(key);\n  const propConstructor = createNavigationPropConstructor(key);\n\n  class NavigatorReduxWrapper extends React.PureComponent<ContainerProps> {\n\n    static router = Navigator.router;\n    currentNavProp: ?NavigationScreenProp<State>;\n    static defaultProps = { theme: 'no-preference' };\n\n    componentDidMount() {\n      initializeListeners(key, this.props.state);\n    }\n\n    componentDidUpdate() {\n      didUpdateCallback();\n    }\n\n    getCurrentNavigation = () => {\n      return this.currentNavProp;\n    }\n\n    get theme() {\n      if (this.props.theme === 'light' || this.props.theme === 'dark') {\n        return this.props.theme;\n      } else if (this.props.theme === 'no-preference') {\n        return 'light';\n      } else {\n        console.warn(\n          `Invalid theme provided: ${\n            this.props.theme\n          }. Only 'light' and 'dark' are supported. Falling back to 'light'`\n        );\n        return 'light';\n      }\n    }\n\n    render() {\n      const { dispatch, state, ...props } = this.props;\n      this.currentNavProp = propConstructor(\n        dispatch,\n        state,\n        Navigator.router,\n        this.getCurrentNavigation,\n      );\n      return (\n        <ThemeProvider value={this.theme}>\n          <NavigationProvider value={this.currentNavProp}>\n            <Navigator\n              {...props}\n              navigation={this.currentNavProp}\n            />\n          </NavigationProvider>\n        </ThemeProvider>\n      );\n    }\n\n  }\n\n  return NavigatorReduxWrapper;\n}\n\nexport {\n  createReduxContainer,\n};\n"]},"metadata":{},"sourceType":"module"}