{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar AccessToken = require('react-native').NativeModules.FBAccessToken;\n\nvar NativeEventEmitter = require('react-native').NativeEventEmitter;\n\nvar eventEmitter = new NativeEventEmitter(AccessToken);\n\nvar FBAccessToken = function () {\n  function FBAccessToken(tokenMap) {\n    _classCallCheck(this, FBAccessToken);\n\n    this.accessToken = tokenMap.accessToken;\n    this.permissions = tokenMap.permissions;\n    this.declinedPermissions = tokenMap.declinedPermissions;\n    this.expiredPermissions = tokenMap.expiredPermissions;\n    this.applicationID = tokenMap.applicationID;\n    this.userID = tokenMap.userID;\n    this.expirationTime = tokenMap.expirationTime;\n    this.lastRefreshTime = tokenMap.lastRefreshTime;\n    this.dataAccessExpirationTime = tokenMap.dataAccessExpirationTime;\n    this.accessTokenSource = tokenMap.accessTokenSource;\n    Object.freeze(this);\n  }\n\n  _createClass(FBAccessToken, [{\n    key: \"getExpires\",\n    value: function getExpires() {\n      return this.expirationTime;\n    }\n  }, {\n    key: \"getPermissions\",\n    value: function getPermissions() {\n      return this.permissions;\n    }\n  }, {\n    key: \"getDeclinedPermissions\",\n    value: function getDeclinedPermissions() {\n      return this.declinedPermissions;\n    }\n  }, {\n    key: \"getExpiredPermissions\",\n    value: function getExpiredPermissions() {\n      return this.expiredPermissions;\n    }\n  }, {\n    key: \"getLastRefresh\",\n    value: function getLastRefresh() {\n      return this.lastRefreshTime;\n    }\n  }, {\n    key: \"getDataAccessExpiration\",\n    value: function getDataAccessExpiration() {\n      return this.dataAccessExpirationTime;\n    }\n  }, {\n    key: \"getApplicationId\",\n    value: function getApplicationId() {\n      return this.applicationID;\n    }\n  }, {\n    key: \"getUserId\",\n    value: function getUserId() {\n      return this.userID;\n    }\n  }], [{\n    key: \"getCurrentAccessToken\",\n    value: function getCurrentAccessToken() {\n      return new Promise(function (resolve, reject) {\n        AccessToken.getCurrentAccessToken(function (tokenMap) {\n          if (tokenMap) {\n            resolve(new FBAccessToken(tokenMap));\n          } else {\n            resolve(null);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setCurrentAccessToken\",\n    value: function setCurrentAccessToken(accessToken) {\n      AccessToken.setCurrentAccessToken(accessToken);\n    }\n  }, {\n    key: \"refreshCurrentAccessTokenAsync\",\n    value: function refreshCurrentAccessTokenAsync() {\n      return AccessToken.refreshCurrentAccessTokenAsync();\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener(listener) {\n      var subscription = eventEmitter.addListener('fbsdk.accessTokenDidChange', function (tokenMap) {\n        if (tokenMap) {\n          listener(new FBAccessToken(tokenMap));\n        } else {\n          listener(null);\n        }\n      });\n      return function () {\n        return subscription.remove();\n      };\n    }\n  }]);\n\n  return FBAccessToken;\n}();\n\nmodule.exports = FBAccessToken;","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/node_modules/react-native-fbsdk/js/FBAccessToken.js"],"names":["AccessToken","require","NativeModules","FBAccessToken","NativeEventEmitter","eventEmitter","tokenMap","accessToken","permissions","declinedPermissions","expiredPermissions","applicationID","userID","expirationTime","lastRefreshTime","dataAccessExpirationTime","accessTokenSource","Object","freeze","Promise","resolve","reject","getCurrentAccessToken","setCurrentAccessToken","refreshCurrentAccessTokenAsync","listener","subscription","addListener","remove","module","exports"],"mappings":"AAuBA;;;;;;AAEA,IAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,aAAxB,CAAsCC,aAA1D;;AAEA,IAAMC,kBAAkB,GAAGH,OAAO,CAAC,cAAD,CAAP,CAAwBG,kBAAnD;;AACA,IAAMC,YAAY,GAAG,IAAID,kBAAJ,CAAuBJ,WAAvB,CAArB;;IAkBMG,a;AAuDJ,yBAAYG,QAAZ,EAAsC;AAAA;;AACpC,SAAKC,WAAL,GAAmBD,QAAQ,CAACC,WAA5B;AACA,SAAKC,WAAL,GAAmBF,QAAQ,CAACE,WAA5B;AACA,SAAKC,mBAAL,GAA2BH,QAAQ,CAACG,mBAApC;AACA,SAAKC,kBAAL,GAA0BJ,QAAQ,CAACI,kBAAnC;AACA,SAAKC,aAAL,GAAqBL,QAAQ,CAACK,aAA9B;AACA,SAAKC,MAAL,GAAcN,QAAQ,CAACM,MAAvB;AACA,SAAKC,cAAL,GAAsBP,QAAQ,CAACO,cAA/B;AACA,SAAKC,eAAL,GAAuBR,QAAQ,CAACQ,eAAhC;AACA,SAAKC,wBAAL,GAAgCT,QAAQ,CAACS,wBAAzC;AACA,SAAKC,iBAAL,GAAyBV,QAAQ,CAACU,iBAAlC;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd;AACD;;;;WAwDD,sBAAqB;AACnB,aAAO,KAAKL,cAAZ;AACD;;;WAQD,0BAAgC;AAC9B,aAAO,KAAKL,WAAZ;AACD;;;WASD,kCAAwC;AACtC,aAAO,KAAKC,mBAAZ;AACD;;;WAED,iCAAuC;AACrC,aAAO,KAAKC,kBAAZ;AACD;;;WAOD,0BAAyB;AACvB,aAAO,KAAKI,eAAZ;AACD;;;WAED,mCAAkC;AAChC,aAAO,KAAKC,wBAAZ;AACD;;;WAKD,4BAA2B;AACzB,aAAO,KAAKJ,aAAZ;AACD;;;WAKD,qBAAoB;AAClB,aAAO,KAAKC,MAAZ;AACD;;;WAzGD,iCAAwD;AACtD,aAAO,IAAIO,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCrB,QAAAA,WAAW,CAACsB,qBAAZ,CAAkC,UAAAhB,QAAQ,EAAI;AAC5C,cAAIA,QAAJ,EAAc;AACZc,YAAAA,OAAO,CAAC,IAAIjB,aAAJ,CAAkBG,QAAlB,CAAD,CAAP;AACD,WAFD,MAEO;AACLc,YAAAA,OAAO,CAAC,IAAD,CAAP;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD;;;WAKD,+BAA6Bb,WAA7B,EAA0D;AACxDP,MAAAA,WAAW,CAACuB,qBAAZ,CAAkChB,WAAlC;AACD;;;WAMD,0CAAsD;AACpD,aAAOP,WAAW,CAACwB,8BAAZ,EAAP;AACD;;;WAMD,qBACEC,QADF,EAEc;AACZ,UAAMC,YAAY,GAAGrB,YAAY,CAACsB,WAAb,CACnB,4BADmB,EAEnB,UAACrB,QAAD,EAA8B;AAC5B,YAAIA,QAAJ,EAAc;AACZmB,UAAAA,QAAQ,CAAC,IAAItB,aAAJ,CAAkBG,QAAlB,CAAD,CAAR;AACD,SAFD,MAEO;AACLmB,UAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,OARkB,CAArB;AAUA,aAAO;AAAA,eAAMC,YAAY,CAACE,MAAb,EAAN;AAAA,OAAP;AACD;;;;;;AA+DHC,MAAM,CAACC,OAAP,GAAiB3B,aAAjB","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.\n *\n * You are hereby granted a non-exclusive, worldwide, royalty-free license to use,\n * copy, modify, and distribute this software in source code or binary form for use\n * in connection with the web services and APIs provided by Facebook.\n *\n * As with any software that integrates with the Facebook platform, your use of\n * this software is subject to the Facebook Developer Principles and Policies\n * [http://developers.facebook.com/policy/]. This copyright notice shall be\n * included in all copies or substantial portions of the software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst AccessToken = require('react-native').NativeModules.FBAccessToken;\n\nconst NativeEventEmitter = require('react-native').NativeEventEmitter;\nconst eventEmitter = new NativeEventEmitter(AccessToken);\n\ntype AccessTokenMap = {\n  accessToken: string,\n  permissions: Array<string>,\n  declinedPermissions: Array<string>,\n  expiredPermissions: Array<string>,\n  applicationID: string,\n  userID: string,\n  expirationTime: number,\n  lastRefreshTime: number,\n  dataAccessExpirationTime: number,\n  accessTokenSource?: string,\n};\n\n/**\n * Represents an immutable access token for using Facebook services.\n */\nclass FBAccessToken {\n  /**\n   * The access token string.\n   */\n  accessToken: string;\n\n  /**\n   * The known granted permissions.\n   */\n  permissions: Array<string>;\n\n  /**\n   * The known declined permissions.\n   */\n  declinedPermissions: Array<string>;\n\n  /**\n   * The known expired permissions.\n   */\n  expiredPermissions: Array<string>;\n\n  /**\n   * The app ID.\n   */\n  applicationID: string;\n\n  /**\n   * The user ID.\n   */\n  userID: string;\n\n  /**\n   * The expiration time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  expirationTime: number;\n\n  /**\n   * The last refresh time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  lastRefreshTime: number;\n\n  /**\n   * The data access expiration time of the access token.\n   * The value is the number of milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  dataAccessExpirationTime: number;\n\n  /**\n   * The source of access token.\n   * @platform android\n   */\n  accessTokenSource: ?string;\n\n  constructor(tokenMap: AccessTokenMap) {\n    this.accessToken = tokenMap.accessToken;\n    this.permissions = tokenMap.permissions;\n    this.declinedPermissions = tokenMap.declinedPermissions;\n    this.expiredPermissions = tokenMap.expiredPermissions;\n    this.applicationID = tokenMap.applicationID;\n    this.userID = tokenMap.userID;\n    this.expirationTime = tokenMap.expirationTime;\n    this.lastRefreshTime = tokenMap.lastRefreshTime;\n    this.dataAccessExpirationTime = tokenMap.dataAccessExpirationTime;\n    this.accessTokenSource = tokenMap.accessTokenSource;\n    Object.freeze(this);\n  }\n\n  /**\n   * Getter for the access token that is current for the application.\n   */\n  static getCurrentAccessToken(): Promise<?FBAccessToken> {\n    return new Promise((resolve, reject) => {\n      AccessToken.getCurrentAccessToken(tokenMap => {\n        if (tokenMap) {\n          resolve(new FBAccessToken(tokenMap));\n        } else {\n          resolve(null);\n        }\n      });\n    });\n  }\n\n  /**\n   * Setter for the access token that is current for the application.\n   */\n  static setCurrentAccessToken(accessToken: AccessTokenMap) {\n    AccessToken.setCurrentAccessToken(accessToken);\n  }\n\n  /**\n   * Updates the current access token with up to date permissions,\n   * and extends the expiration date, if extension is possible.\n   */\n  static refreshCurrentAccessTokenAsync(): Promise<any> {\n    return AccessToken.refreshCurrentAccessTokenAsync();\n  }\n\n  /**\n   * Adds a listener for when the access token changes. Returns a functions which removes the\n   * listener when called.\n   */\n  static addListener(\n    listener: (accessToken: ?FBAccessToken) => void,\n  ): () => void {\n    const subscription = eventEmitter.addListener(\n      'fbsdk.accessTokenDidChange',\n      (tokenMap: AccessTokenMap) => {\n        if (tokenMap) {\n          listener(new FBAccessToken(tokenMap));\n        } else {\n          listener(null);\n        }\n      },\n    );\n    return () => subscription.remove();\n  }\n\n  /**\n   * Gets the date at which the access token expires. The value is the number of\n   * milliseconds since Jan. 1, 1970, midnight GMT.\n   */\n  getExpires(): number {\n    return this.expirationTime;\n  }\n\n  /**\n   * Get the list of permissions associated with this access token. Note that the most up-to-date\n   * list of permissions is maintained by Facebook, so this list may be outdated if permissions\n   * have been added or removed since the time the AccessToken object was created. See\n   * https://developers.facebook.com/docs/reference/login/#permissions for details.\n   */\n  getPermissions(): Array<string> {\n    return this.permissions;\n  }\n\n  /**\n   * Gets the list of permissions declined by the user with this access token. It represents the\n   * entire set of permissions that have been requested and declined. Note that the most\n   * up-to-date list of permissions is maintained by Facebook, so this list may be outdated if\n   * permissions have been granted or declined since the last time an AccessToken object was\n   * created. See https://developers.facebook.com/docs/reference/login/#permissions for details.\n   */\n  getDeclinedPermissions(): Array<string> {\n    return this.declinedPermissions;\n  }\n\n  getExpiredPermissions(): Array<string> {\n    return this.expiredPermissions;\n  }\n\n  /**\n   * Gets the date at which the token was last refreshed. Since tokens expire, the Facebook SDK\n   * will attempt to renew them periodically. The value is the number of milliseconds since\n   * Jan. 1, 1970, midnight GMT.\n   */\n  getLastRefresh(): number {\n    return this.lastRefreshTime;\n  }\n\n  getDataAccessExpiration(): number {\n    return this.dataAccessExpirationTime;\n  }\n\n  /**\n   * Gets the ID of the Facebook Application associated with this access token.\n   */\n  getApplicationId(): string {\n    return this.applicationID;\n  }\n\n  /**\n   * Gets user ID associated with this access token.\n   */\n  getUserId(): string {\n    return this.userID;\n  }\n}\n\nmodule.exports = FBAccessToken;\n"]},"metadata":{},"sourceType":"script"}