{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\n\nvar FirestoreTimestamp = function () {\n  function FirestoreTimestamp(seconds, nanoseconds) {\n    _classCallCheck(this, FirestoreTimestamp);\n\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' out of range: \" + nanoseconds);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' out of range: \" + nanoseconds);\n    }\n\n    if (seconds < -62135596800) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' out of range: \" + seconds);\n    }\n\n    if (seconds >= 253402300800) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' out of range: \" + seconds);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  _createClass(FirestoreTimestamp, [{\n    key: \"seconds\",\n    get: function get() {\n      return this._seconds;\n    }\n  }, {\n    key: \"nanoseconds\",\n    get: function get() {\n      return this._nanoseconds;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof FirestoreTimestamp)) {\n        throw Error(\"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\");\n      }\n\n      return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n    }\n  }, {\n    key: \"toDate\",\n    value: function toDate() {\n      return new Date(this.toMillis());\n    }\n  }, {\n    key: \"toMillis\",\n    value: function toMillis() {\n      return this._seconds * 1000 + this._nanoseconds / 1e6;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"FirestoreTimestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n  }], [{\n    key: \"now\",\n    value: function now() {\n      return FirestoreTimestamp.fromMillis(Date.now());\n    }\n  }, {\n    key: \"fromDate\",\n    value: function fromDate(date) {\n      if (!isDate(date)) {\n        throw new Error(\"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\");\n      }\n\n      return FirestoreTimestamp.fromMillis(date.getTime());\n    }\n  }, {\n    key: \"fromMillis\",\n    value: function fromMillis(milliseconds) {\n      var seconds = Math.floor(milliseconds / 1000);\n      var nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n      return new FirestoreTimestamp(seconds, nanoseconds);\n    }\n  }]);\n\n  return FirestoreTimestamp;\n}();\n\nexport { FirestoreTimestamp as default };","map":{"version":3,"sources":["/Users/630556369qqcom/Desktop/DeepLift-App/node_modules/@react-native-firebase/firestore/lib/FirestoreTimestamp.js"],"names":["isDate","isNumber","FirestoreTimestamp","seconds","nanoseconds","Error","_seconds","_nanoseconds","other","Date","toMillis","fromMillis","now","date","getTime","milliseconds","Math","floor"],"mappings":";;AAiBA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,uCAAjC;;IAEqBC,kB;AAqBnB,8BAAYC,OAAZ,EAAqBC,WAArB,EAAkC;AAAA;;AAChC,QAAI,CAACH,QAAQ,CAACE,OAAD,CAAb,EAAwB;AACtB,YAAM,IAAIE,KAAJ,CAAU,iEAAV,CAAN;AACD;;AAED,QAAI,CAACJ,QAAQ,CAACG,WAAD,CAAb,EAA4B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;AACD;;AAED,QAAID,WAAW,GAAG,CAAlB,EAAqB;AACnB,YAAM,IAAIC,KAAJ,+DAAsED,WAAtE,CAAN;AACD;;AAED,QAAIA,WAAW,IAAI,GAAnB,EAAwB;AACtB,YAAM,IAAIC,KAAJ,+DAAsED,WAAtE,CAAN;AACD;;AAGD,QAAID,OAAO,GAAG,CAAC,WAAf,EAA4B;AAC1B,YAAM,IAAIE,KAAJ,2DAAkEF,OAAlE,CAAN;AACD;;AAGD,QAAIA,OAAO,IAAI,YAAf,EAA6B;AAC3B,YAAM,IAAIE,KAAJ,2DAAkEF,OAAlE,CAAN;AACD;;AAED,SAAKG,QAAL,GAAgBH,OAAhB;AACA,SAAKI,YAAL,GAAoBH,WAApB;AACD;;;;SAED,eAAc;AACZ,aAAO,KAAKE,QAAZ;AACD;;;SAED,eAAkB;AAChB,aAAO,KAAKC,YAAZ;AACD;;;WAED,iBAAQC,KAAR,EAAe;AACb,UAAI,EAAEA,KAAK,YAAYN,kBAAnB,CAAJ,EAA4C;AAC1C,cAAMG,KAAK,CACT,oFADS,CAAX;AAGD;;AAED,aAAOG,KAAK,CAACL,OAAN,KAAkB,KAAKG,QAAvB,IAAmCE,KAAK,CAACJ,WAAN,KAAsB,KAAKG,YAArE;AACD;;;WAED,kBAAS;AACP,aAAO,IAAIE,IAAJ,CAAS,KAAKC,QAAL,EAAT,CAAP;AACD;;;WAED,oBAAW;AACT,aAAO,KAAKJ,QAAL,GAAgB,IAAhB,GAAuB,KAAKC,YAAL,GAAoB,GAAlD;AACD;;;WAED,oBAAW;AACT,6CAAqC,KAAKJ,OAA1C,sBAAkE,KAAKC,WAAvE;AACD;;;WA/ED,eAAa;AACX,aAAOF,kBAAkB,CAACS,UAAnB,CAA8BF,IAAI,CAACG,GAAL,EAA9B,CAAP;AACD;;;WAED,kBAAgBC,IAAhB,EAAsB;AACpB,UAAI,CAACb,MAAM,CAACa,IAAD,CAAX,EAAmB;AACjB,cAAM,IAAIR,KAAJ,CACJ,+EADI,CAAN;AAGD;;AAED,aAAOH,kBAAkB,CAACS,UAAnB,CAA8BE,IAAI,CAACC,OAAL,EAA9B,CAAP;AACD;;;WAED,oBAAkBC,YAAlB,EAAgC;AAC9B,UAAMZ,OAAO,GAAGa,IAAI,CAACC,KAAL,CAAWF,YAAY,GAAG,IAA1B,CAAhB;AACA,UAAMX,WAAW,GAAG,CAACW,YAAY,GAAGZ,OAAO,GAAG,IAA1B,IAAkC,GAAtD;AACA,aAAO,IAAID,kBAAJ,CAAuBC,OAAvB,EAAgCC,WAAhC,CAAP;AACD;;;;;;SAnBkBF,kB","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isDate, isNumber } from '@react-native-firebase/app/lib/common';\n\nexport default class FirestoreTimestamp {\n  static now() {\n    return FirestoreTimestamp.fromMillis(Date.now());\n  }\n\n  static fromDate(date) {\n    if (!isDate(date)) {\n      throw new Error(\n        \"firebase.firestore.Timestamp.fromDate(*) 'date' expected a valid Date object.\",\n      );\n    }\n\n    return FirestoreTimestamp.fromMillis(date.getTime());\n  }\n\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanoseconds = (milliseconds - seconds * 1000) * 1e6;\n    return new FirestoreTimestamp(seconds, nanoseconds);\n  }\n\n  constructor(seconds, nanoseconds) {\n    if (!isNumber(seconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'seconds' expected a number value.\");\n    }\n\n    if (!isNumber(nanoseconds)) {\n      throw new Error(\"firebase.firestore.Timestamp 'nanoseconds' expected a number value.\");\n    }\n\n    if (nanoseconds < 0) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    if (nanoseconds >= 1e9) {\n      throw new Error(`firebase.firestore.Timestamp 'nanoseconds' out of range: ${nanoseconds}`);\n    }\n\n    // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\n    if (seconds < -62135596800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new Error(`firebase.firestore.Timestamp 'seconds' out of range: ${seconds}`);\n    }\n\n    this._seconds = seconds;\n    this._nanoseconds = nanoseconds;\n  }\n\n  get seconds() {\n    return this._seconds;\n  }\n\n  get nanoseconds() {\n    return this._nanoseconds;\n  }\n\n  isEqual(other) {\n    if (!(other instanceof FirestoreTimestamp)) {\n      throw Error(\n        \"firebase.firestore.Timestamp.isEqual(*) 'other' expected an instance of Timestamp.\",\n      );\n    }\n\n    return other.seconds === this._seconds && other.nanoseconds === this._nanoseconds;\n  }\n\n  toDate() {\n    return new Date(this.toMillis());\n  }\n\n  toMillis() {\n    return this._seconds * 1000 + this._nanoseconds / 1e6;\n  }\n\n  toString() {\n    return `FirestoreTimestamp(seconds=${this.seconds}, nanoseconds=${this.nanoseconds})`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}